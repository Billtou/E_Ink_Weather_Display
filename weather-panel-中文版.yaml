substitutions:
  name: weather-panel-fa874c
  friendly_name: Weather Panel fa874c
  upper_devicename: "ESP32 7.5in RED BLACK WHITE"
  project_name: "Taiwan Smart Home Technology.E-Paper Weather Panel"
  project_version: "2025.01.25c"   
  
esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: False
  project:
    name: "${project_name}"
    version: "${project_version}"
  comment: ${upper_devicename}    
  on_boot: 
    then:
      - switch.turn_on: show_last_updated
      
esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  # level: ERROR
# Enable Home Assistant API
api:

ota:
  platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    
web_server:
  port: 80
  version: 3

captive_portal:

external_components:
  - source:
      type: git
      url: https://github.com/atomicmike/esphome.git
      ref: waveshare-color-2023.12
    components: [ waveshare_epaper ]


# light:
#   - platform: neopixelbus
#     type: GRB
#     variant: ws2812
#     pin: GPIO16
#     num_leds: 1
#     name: ${name}
#     icon: mdi:led-on   

# macintosh.ttf
# Include custom fonts
font:
  #forecast weekday     
  - file: 'fonts/GenJyuuGothic-Medium.ttf'
    id: font_jyuugothic_Medium
    size: 55
    glyphs: 
      ['一', '二', '三', '四', '五', '六', '七', '八', '九', '十',
      '月']
  - file: 'fonts/GenJyuuGothic-Medium.ttf'
    id: font_jyuugothic_Bold
    size: 52
    glyphs: 
      ['一', '二', '三', '四', '五', '六', '日', '星', '期','未','知']

  - file: 'fonts/GenJyuuGothic-Bold.ttf'
    id: font_jyuugothic_Light
    size: 24
    glyphs: 
      ['體', '感', '溫', '度','週','一', '二', '三', '四', '五', '六', '日','未','知','星', '期','立','春','雨','水','迎','端','月']

  - file: 'fonts/GenJyuuGothic-Light.ttf'
    id: font_jyuugothic_Bold_2
    size: 40
    glyphs: 
      ['下', '雨', '晴', '天','多','霧','時','霰','陰','打','雷','有','風','傾','盆','大','朗','的','夜','空','雪','冰','雹']

  - file: 'fonts/GenJyuuGothic-Light.ttf'
    id: font_jyuugothic_Light_1
    size: 20
    glyphs: 
      ['立','春','雨','水','迎','端','月',' ','驚','蟄','分','花','清','明','穀','桐','夏','小','滿','芒','種','至','莆','大','暑','荔','秋','處','巧','白','鷺','桂','寒','露','霜','降','菊','冬','雪','陽','葭','臘']

  #update time
  - file: 'fonts/Gotham-Rounded-Book.ttf'
    id: font_smallest
    size: 12
    glyphs:    
      ['/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ' ', ':','L','a','s','t','u','p','d','e','U']  

  #forecast weekday     
  - file: 'fonts/Gotham-Rounded-Bold.ttf'
    id: font_medium_bold
    size: 23
    glyphs: &font-glyphs    
      ['!', ',', '.', '"', '%', '-', '_', ':', '°', '/',
       '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ' ',
       'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K',
       'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 
       'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
       'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',
       's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
      
  - file: 'fonts/Gotham-Rounded-Book.ttf'
    id: font_month
    size: 55
    glyphs:    
      ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K',
       'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 
       'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
       'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',
       's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2',
       '3', '4', '5', '6', '7', '8', '9', ':']  

  #rooms data
  - file: 'fonts/Gotham-Rounded-Bold.ttf'
    id: font_small
    size: 30
    glyphs:    
      ['!', ',', '.', '"', '%', '-', '_', ':', '°', '/',
       '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ' ',
       'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K',
       'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 
       'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
       'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',
       's', 't', 'u', 'v', 'w', 'x', 'y', 'z']

  #forecast temperature
  - file: 'fonts/Gotham-Rounded-Bold.ttf'
    id: font_medium
    size: 32
    glyphs:    
      ['°', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9','%']

  #Rooms name     
  - file: 'fonts/Gotham-Rounded-Bold.ttf'
    id: font_rooms_name
    size: 24
    glyphs: 
      ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K',
       'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 
       'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
       'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',
       's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2',
       '3', '4', '5', '6', '7', '8', '9', ':',' ','%','-']  

  #weekday 
  - file: 'fonts/Gotham-Rounded-Bold.ttf'
    id: font_bold
    size: 45
    glyphs: *font-glyphs

  - file: 'fonts/Gotham-Rounded-Bold.ttf'
    id: font_feel_like
    size: 65
    glyphs: 
      ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9','°','N','o','n','e']

  - file: 'fonts/Gotham-Rounded-Bold.ttf'
    id:  font_today_temp
    size: 100
    glyphs: *font-glyphs  
   
  - file: 'fonts/Gotham-Rounded-Bold.ttf'
    id: font_day_large
    size: 120
    glyphs:
      ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: icon_today
    size: 265
    glyphs: &mdi-weather-glyphs
      - "\U000F0590" # mdi-weather-cloudy
      - "\U000F0F2F" # mdi-weather-cloudy-alert
      - "\U000F0E6E" # mdi-weather-cloudy-arrow-right
      - "\U000F0593" # mdi-weather-lightning
      - "\U000F067E" # mdi-weather-lightning-rainy
      - "\U000F0594" # mdi-weather-night
      - "\U000F0F31" # mdi-weather-night-partly-cloudy      
      - "\U000F0595" # mdi-weather-partly-cloudy
      - "\U000F0F32" # mdi-weather-partly-lightning
      - "\U000F0F33" # mdi-weather-partly-rainy
      - "\U000F0596" # mdi-weather-pouring
      - "\U000F0597" # mdi-weather-rainy
      - "\U000F0599" # mdi-weather-sunny
      - "\U000F0F37" # mdi-weather-sunny-alert
      - "\U000F14E4" # mdi-weather-sunny-off
      - "\U000F059A" # mdi-weather-sunset
      - "\U000F059B" # mdi-weather-sunset-down
      - "\U000F059C" # mdi-weather-sunset-up
      - "\U000F059D" # mdi-weather-windy
      - "\U000F059E" # mdi-weather-windy-variant
      - "\U000F0783" # mdi-signal-off
      - "\U000F08BF" # mdi-signal-cellular-outline bad
      - "\U000F08BC" # mdi-signal-cellular-1
      - "\U000F08BD" # mdi-signal-cellular-2
      - "\U000F08BE" # mdi-signal-cellular-3 good
      
    #forecast & signal icon      
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: icon_forecast
    size: 40
    glyphs: *mdi-weather-glyphs

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: icon_room
    size: 30
    glyphs:     
      - "\U000F050F" # mdi-thermometer
      - "\U000F058E" # mdi-water-percent
      - "\U000F07E4" # mdi-molecule-co2   
      - "\U000F0BAC" # mdi:molecule-pm25
      - "\U000F0D43" # mdi:air-filter
      - "\U000F0438" # mdi:radiator
      - "\U000F054B" # mdi:umbrella
      - "\U000F0690" # mdi:beaker-outline
      - "\U000F17FF" # mdi:sun-wireless-outline
      - "\U000F15FA" # mdi:windsock 
      - "\U000F1A86" # mdi:water-thermometer-outline
      - "\U000F0E03" # mdi:mdi:thermometer-chevron-up
      - "\U000F0E02" # mdi:thermometer-chevron-down
      - "\U000F0596" # mdi:weather-pouring
      - "\U000F12A3" # mdi:battery-high
      - "\U000F12A2" # mdi:battery-medium"
      - "\U000F12A1" # mdi:battery-low
      - "\U000F008E" # mdi:battery-outline

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: icon_sun_and_moon
    size: 55
    glyphs:
      - "\U000F0F61" # moon-first-quarter
      - "\U000F0F62" # moon-full
      - "\U000F0F63" # moon-last-quarter
      - "\U000F0F64" # moon-new
      - "\U000F0F65" # moon-waning-crescent
      - "\U000F0F66" # moon-waning-gibbous
      - "\U000F0F67" # moon-waxing-cresent
      - "\U000F0F68" # moon-waxing-gibbous
      - "\U000F054B" # mdi:umbrella

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: sunset_down_up
    size: 30
    glyphs:
      - "\U000F059B" # weather-sunset-down
      - "\U000F059C" # weather-sunset-up

# Call Subway and Weather sensors from HA
sensor:
  - platform: wifi_signal
    name: "WiFi Signal"
    icon: mdi:signal
    id: wifisignal
    update_interval: 600s

text_sensor:
  - platform: homeassistant
    entity_id: sensor.eink_sensors
    id: today_weather

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: today_temperature
    id: today_temperature

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: today_humidity
    id: today_humidity

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: today_feel_like
    id: today_feel_like

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: today_uv_index
    id: today_uv_index

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: today_dew_point
    id: today_dew_point

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: today_wind_speed
    id: today_wind_speed

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_rain_precipitation
    id: forecast_rain_precipitation

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_rain_probability
    id: forecast_rain_probability

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_weekday_1
    id: forecast_weekday_1

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_time_1
    id: forecast_time_1

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_condition_1
    id: forecast_weather_1

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_temperature_1
    id: forecast_temperature_1

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_templow_1
    id: forecast_templow_1 

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_precipitation_probability_1
    id: forecast_precipitation_probability_1

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_weekday_2
    id: forecast_weekday_2

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_time_2
    id: forecast_time_2

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_condition_2
    id: forecast_weather_2

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_temperature_2
    id: forecast_temperature_2

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_templow_2
    id: forecast_templow_2

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_precipitation_probability_2
    id: forecast_precipitation_probability_2  

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_weekday_3
    id: forecast_weekday_3

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_time_3
    id: forecast_time_3

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_condition_3
    id: forecast_weather_3

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_temperature_3
    id: forecast_temperature_3

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_templow_3
    id: forecast_templow_3  

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_precipitation_probability_3
    id: forecast_precipitation_probability_3    

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_weekday_4
    id: forecast_weekday_4

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_time_4
    id: forecast_time_4

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_condition_4
    id: forecast_weather_4

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_temperature_4
    id: forecast_temperature_4

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_templow_4
    id: forecast_templow_4

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_precipitation_probability_4
    id: forecast_precipitation_probability_4 

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_weekday_5
    id: forecast_weekday_5

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_time_5
    id: forecast_time_5

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_condition_5
    id: forecast_weather_5

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_temperature_5
    id: forecast_temperature_5

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_templow_5
    id: forecast_templow_5

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_precipitation_probability_5
    id: forecast_precipitation_probability_5

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_weekday_6
    id: forecast_weekday_6

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_time_6
    id: forecast_time_6

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_condition_6
    id: forecast_weather_6

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_temperature_6
    id: forecast_temperature_6

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_templow_6
    id: forecast_templow_6    

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_precipitation_probability_6
    id: forecast_precipitation_probability_6    

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_weekday_7
    id: forecast_weekday_7

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_time_7
    id: forecast_time_7

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_condition_7
    id: forecast_weather_7

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_temperature_7
    id: forecast_temperature_7

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_templow_7
    id: forecast_templow_7    

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_precipitation_probability_7
    id: forecast_precipitation_probability_7

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_weekday_8
    id: forecast_weekday_8

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_time_8
    id: forecast_time_8

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_condition_8
    id: forecast_weather_8

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_temperature_8
    id: forecast_temperature_8

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_templow_8
    id: forecast_templow_8   

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_precipitation_probability_8
    id: forecast_precipitation_probability_8

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_weekday_9
    id: forecast_weekday_9

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_time_9
    id: forecast_time_9

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_condition_9
    id: forecast_weather_9

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_temperature_9
    id: forecast_temperature_9

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_templow_9
    id: forecast_templow_9  

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_precipitation_probability_9
    id: forecast_precipitation_probability_9


  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_weekday_10
    id: forecast_weekday_10

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_time_10
    id: forecast_time_10

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_condition_10
    id: forecast_weather_10

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_temperature_10
    id: forecast_temperature_10

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_templow_10
    id: forecast_templow_10 

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_precipitation_probability_10
    id: forecast_precipitation_probability_10


  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_weekday_11
    id: forecast_weekday_11

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_time_11
    id: forecast_time_11

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_condition_11
    id: forecast_weather_11

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_temperature_11
    id: forecast_temperature_11

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_templow_11
    id: forecast_templow_11

  - platform: homeassistant
    entity_id: sensor.eink_sensors
    attribute: forecast_precipitation_probability_11
    id: forecast_precipitation_probability_11


  - platform: homeassistant
    id: next_sunset
    entity_id: sensor.eink_next_sunset
    internal: true
  - platform: homeassistant
    id: next_sunrise
    entity_id: sensor.eink_next_rising
    internal: true
  - platform: homeassistant
    id: today_moon
    entity_id: sensor.eink_moon_phase
    internal: true
  - platform: template
    name: aqi_color
    id: aqi_color
    internal: true

  - platform: wifi_info
    ip_address:
      name: "IP"      
      icon: "mdi:ip-outline"
    ssid:
      name: "SSID"
      icon: "mdi:router-wireless"
    mac_address:
      name: "MAC"
      icon: "mdi:lan"
select:
  - platform: template
    name: "Sidebar Type"
    icon: mdi:format-list-bulleted-type
    id: options_windows
    optimistic: true
    options:
      - nothing      
      - sun_and_moon
      - time
    initial_option: nothing

  - platform: template
    name: "Refresh Time"
    icon: mdi:refresh-auto
    id: refresh_time
    optimistic: true
    options:
      - on_cwb
      - one_hour
      - thirty_minutes
    initial_option: on_cwb

  - platform: template
    name: "Forcast Type"
    icon: mdi:format-list-bulleted-type
    id: forcast_mode
    optimistic: true
    options:
      - hourly
      - daily_high_low
      - daily_high_rain
    initial_option: daily_high_low    

  - platform: template
    name: "Left Sidebar Type"
    id: sidebar_mode
    internal: true
    optimistic: true
    options:
      - weather_detail
      - from_aircube
    # initial_option: weather_detail

switch:
  - platform: template
    name: "Show Last Updated"
    icon: mdi:update
    id: show_last_updated
    optimistic: true
    entity_category: config
    # restore_mode: ALWAYS_ON
    on_turn_on:
      then:
      - switch.turn_on: show_last_updated
    on_turn_off:
      then:
      - switch.turn_off: show_last_updated     

button:
  - platform: template
    name: 'Manual Refresh'
    icon: mdi:car-shift-pattern
    on_press:
      then:
        - component.update: my_display
    # internal: false

time:
  - platform: homeassistant 
    id: ha_time 
    on_time:
      - seconds: 0    # 每整點5分鐘
        minutes: 5
        then:
          - if:
              condition:
                lambda: 'return id(refresh_time).state == "thirty_minutes";'
              then:
                - component.update: my_display    

      - seconds: 0     # 每整點35分鐘
        minutes: 35
        then:
          - if:
              condition:
                lambda: 'return id(refresh_time).state == "thirty_minutes";'
              then:
                - component.update: my_display                    

      - seconds: 0 # 每整點執行一次並偏移5分鐘
        minutes: 5
        then:
          - if:
              condition:
                lambda: 'return id(refresh_time).state == "one_hour";'
              then:
                - component.update: my_display      

      - seconds: 0   # 特定時間執行
        minutes: 35
        hours: 7
        then:
          - if:
              condition:
                lambda: 'return id(refresh_time).state == "on_cwb";'
              then:
                - component.update: my_display   

      - seconds: 0   # 特定時間執行
        minutes: 35
        hours: 8
        then:
          - if:
              condition:
                lambda: 'return id(refresh_time).state == "on_cwb";'
              then:
                - component.update: my_display   

      - seconds: 0
        minutes: 35
        hours: 11
        then:
          - if:
              condition:
                lambda: 'return id(refresh_time).state == "on_cwb";'
              then:
                - component.update: my_display   
      - seconds: 0
        minutes: 35
        hours: 17
        then:
          - if:
              condition:
                lambda: 'return id(refresh_time).state == "on_cwb";'
              then:
                - component.update: my_display   
      - seconds: 0
        minutes: 35
        hours: 23
        then:
          - if:
              condition:
                lambda: 'return id(refresh_time).state == "on_cwb";'
              then:
                - component.update: my_display    

# Define colors
# This design is white on black and color_red so this is necessary.
color:
  - id: color_black
    red: 100%
    green: 100%
    blue: 100%
    white: 100%
  - id: color_red
    red: 100%
    green: 0%
    blue: 0%
    white: 0%

# Pins for Waveshare ePaper ESP Board
spi:
  clk_pin: GPIO22
  mosi_pin: GPIO23

# Now render everything on the ePaper screen.
display:  
  - platform: waveshare_epaper
    cs_pin: GPIO1
    dc_pin: GPIO3
    busy_pin: 
      number: GPIO19
      inverted: true
    reset_pin: GPIO21
    reset_duration: 3ms
    model: 7.50inv2b
    update_interval: never
    id: my_display
    rotation: 0°
    pages:
      - id: page1
        lambda: |-
          // Map weather states to MDI characters.
          std::map<std::string, std::string> weather_icon_map
            {
              {"cloudy", "\U000F0590"},
              {"cloudy-alert", "\U000F0F2F"},
              {"fog", "\U000F0591"},
              {"hail", "\U000F0592"},
              {"hazy", "\U000F0F30"},
              {"lightning", "\U000F0593"},
              {"lightning-rainy", "\U000F067E"},
              {"clear-night", "\U000F0594"},
              {"night-partly-cloudy", "\U000F0F31"},          
              {"partlycloudy", "\U000F0595"},
              {"partly-lightning", "\U000F0F32"},
              {"partly-rainy", "\U000F0F33"},
              {"pouring", "\U000F0596"},
              {"rainy", "\U000F0597"},
              {"sunny", "\U000F0599"},
              {"sunny-alert", "\U000F0F37"},
              {"sunny-off", "\U000F14E4"},
              {"sunset", "\U000F059A"},
              {"sunset-down", "\U000F059B"},
              {"sunset-up", "\U000F059C"},
              {"windy", "\U000F059D"},
              {"windy-variant", "\U000F059E"},
            };
          //************************ Calendar ************************        
          // 獲取當前月份的數字
          int month_num = id(ha_time).now().month; 
          // 對應中文月份
          std::string month_names[] = {
              "一月", "二月", "三月", "四月", "五月", "六月", 
              "七月", "八月", "九月", "十月", "十一", "十二"
          };
          // 確保月份值有效，並選擇對應的中文月份
          std::string month = (month_num >= 1 && month_num <= 12) ? month_names[month_num - 1] : "未知月份";
          // 顯示中文月份
          it.print(95, 0, id(font_jyuugothic_Medium), id(color_black), TextAlign::TOP_CENTER, month.c_str());

          //day text
          it.strftime(95, 60, id(font_day_large),id(color_red), TextAlign::TOP_CENTER, "%d", id(ha_time).now());      

          //line horizontal 1 x,y,width,height
          it.filled_rectangle(15, 165, 156, 6,id(color_red));

          // 使用 strftime 取得當前星期數字 (1-7)，其中 1 表示星期一,7 表示星期日
          char weekday_char[2];
          id(ha_time).now().strftime(weekday_char, sizeof(weekday_char), "%u");

          // 轉換星期數字字元為整數，調整為 0 (星期日) 到 6 (星期六)
          int weekday_num = atoi(weekday_char) % 7; // 星期日從 7 轉為 0

          // 中文星期名稱陣列
          std::string weekday_names[] = {
              "星期日", "星期一", "星期二", "星期三", 
              "星期四", "星期五", "星期六"
          };

          // 確保有效性，並選擇對應的中文星期名稱
          std::string weekday = (weekday_num >= 0 && weekday_num <= 6) ? weekday_names[weekday_num] : "未知星期";

          // 顯示中文星期名稱
          it.print(15, 169, id(font_jyuugothic_Bold), id(color_black), TextAlign::TOP_LEFT, weekday.c_str());

          //***************************************** 24節氣 *****************************************************

          int room1_icon_x=15;
          int room1_icon_y=235;
          int room1_text_x=125;
          int icon_gap_y=43;
          int room1_gap_x=150;

          //room data
          int room1_data_x=120;
          int room1_data_y=room1_icon_y+2;
          int data_gap_y=35;
          int room2_name_y=260;
          int room2_gap_x=150;

          // 英文星期名稱與中文對應表
          std::map<std::string, std::string> weather_map = {
              {"rainy", "下雨"},
              {"sunny", "晴天"},
              {"fog", "多霧"},
              {"partlycloudy", "晴時多雲"},
              {"sleet", "霰"},
              {"cloudy", "陰天"},
              {"lightning", "打雷"},
              {"lightning-rainy", "雷雨"},
              {"windy", "有風"}, 
              {"pouring", "傾盆大雨"}, 
              {"clear-night", "晴朗的夜空"},
              {"snowy","下雪"},
              {"hail","冰雹"}
          };
          // 取得英文天氣預報名稱
          std::string english_weather = id(today_weather).state;

          // 將英文天氣預報轉換為中文名稱，若找不到對應，預設顯示 "未知天氣"
          std::string chinese_weather = weather_map.count(english_weather) > 0 ? weather_map[english_weather] : "未知天氣";
          // 顯示中文天氣名稱
          it.printf(220, room2_name_y + 20, id(font_jyuugothic_Bold_2), id(color_red), TextAlign::BOTTOM_LEFT, "%s", chinese_weather.c_str());

          //it.print(19, room2_name_y + 10, id(font_small), id(color_red), TextAlign::BOTTOM_LEFT, id(today_weather).state.c_str()); // 氣象預報英文

          // 季節對應的文字表
          int month_num_1 = id(ha_time).now().month; 
          // 對應中文季節
          std::string month_names_1[] = {
              "立春 雨水 迎端月", "驚蟄 春分 迎花月", "清明 穀雨 迎桐月", "立夏 小滿 迎梅月", "芒種 夏至 迎莆月", "大暑 小暑 迎荔月", 
              "立秋 處暑 迎巧月", "白鷺 秋分 迎桂月", "寒露 霜降 迎菊月", "立冬 小雪 迎陽月", "大雪 冬至 迎葭月", "大寒 小寒 迎臘月"
          };
          // 確保季節值有效，並選擇對應的中文季節
          std::string month_1 = (month_num_1 >= 1 && month_num_1 <= 12) ? month_names_1[month_num_1 - 1] : "未知節氣";
          // 顯示中文季節
          it.print(19, room2_name_y + 10, id(font_jyuugothic_Light_1), id(color_black), TextAlign::BOTTOM_LEFT, month_1.c_str()); 

          //***************************************** sidebar *****************************************************


          //sensor icon
          int room2_icon_y=300;
          it.print(room1_icon_x, room2_icon_y+icon_gap_y, id(icon_room),id(color_black), TextAlign::BOTTOM_LEFT, "\U000F058E"); //umidity
          //it.print(room1_icon_x, room2_icon_y+icon_gap_y+icon_gap_y, id(icon_room),id(color_black), TextAlign::BOTTOM_LEFT,  "\U000F058E"); //umidity
          it.print(room1_icon_x, room2_icon_y+icon_gap_y+icon_gap_y+icon_gap_y, id(icon_room),id(color_black),TextAlign::BOTTOM_LEFT, "\U000F054B"); //ain_precipitation
          it.print(room1_icon_x, room2_icon_y+icon_gap_y+icon_gap_y+icon_gap_y+icon_gap_y, id(icon_room),id(color_black), TextAlign::BOTTOM_LEFT,"\U000F15FA"); //wind_speed

          //sensor data
          int room2_data_y=room2_icon_y+2;
          it.printf(room1_data_x, room2_icon_y+icon_gap_y, id(font_small),id(color_red), TextAlign::BOTTOM_RIGHT, "%s",id(today_humidity).state.c_str()); //umidity
          //it.printf(room1_data_x, room2_icon_y+icon_gap_y+icon_gap_y, id(font_small),id(color_red), TextAlign::BOTTOM_RIGHT,  "%s",id(today_humidity).state.c_str()); //umidity
          it.printf(room1_data_x, room2_icon_y+icon_gap_y+icon_gap_y+icon_gap_y, id(font_small),id(color_red),TextAlign::BOTTOM_RIGHT, "%s",id(forecast_rain_precipitation).state.c_str()); //ain_precipitation
          it.printf(room1_data_x, room2_icon_y+icon_gap_y+icon_gap_y+icon_gap_y+icon_gap_y, id(font_small),id(color_red), TextAlign::BOTTOM_RIGHT, "%s",id(today_wind_speed).state.c_str()); //wind_speed

          //sensor 單位
          it.print(room1_data_x, room2_icon_y+icon_gap_y, id(font_small),id(color_black), TextAlign::BOTTOM_LEFT,"%");
          //it.print(room1_data_x, room2_icon_y+icon_gap_y+icon_gap_y, id(font_small),id(color_black), TextAlign::BOTTOM_LEFT,"%");
          it.print(room1_data_x, room2_icon_y+icon_gap_y+icon_gap_y+icon_gap_y, id(font_small),id(color_black), TextAlign::BOTTOM_LEFT,"%");
          it.print(room1_data_x, room2_icon_y+icon_gap_y+icon_gap_y+icon_gap_y+icon_gap_y, id(font_small),id(color_black), TextAlign::BOTTOM_LEFT,"m/s");

          // by 每天與 每小時顯示
          if (id(forcast_mode).state.c_str() == std::string("hourly_feels_humi") || id(forcast_mode).state.c_str() == std::string("hourly_feels_rain")) {
            it.print(room1_icon_x, room2_icon_y+icon_gap_y+icon_gap_y, id(icon_room),id(color_black), TextAlign::BOTTOM_LEFT, "\U000F1A86"); //water-thermometer
            it.print(room1_data_x, room2_icon_y+icon_gap_y+icon_gap_y, id(font_small),id(color_black), TextAlign::BOTTOM_LEFT,"°c");
            it.printf(room1_data_x, room2_icon_y+icon_gap_y+icon_gap_y, id(font_small),id(color_red), TextAlign::BOTTOM_RIGHT,"%s",id(today_dew_point).state.c_str()); //water-thermometer
          } else { 
            it.print(room1_icon_x, room2_icon_y+icon_gap_y+icon_gap_y, id(icon_room),id(color_black), TextAlign::BOTTOM_LEFT, "\U000F17FF"); //uv_index
            it.print(room1_data_x, room2_icon_y+icon_gap_y+icon_gap_y, id(font_small),id(color_black), TextAlign::BOTTOM_LEFT,"UV");
            if (id(today_uv_index).state.c_str() != std::string("none")){
              it.printf(room1_data_x, room2_icon_y+icon_gap_y+icon_gap_y, id(font_small),id(color_red), TextAlign::BOTTOM_RIGHT,"%s",id(today_uv_index).state.c_str()); //uv_index
            }
          }

          //************************ TODAY weather ************************
          //today weather big icon
          it.printf(400, 5, id(icon_today),id(color_black), TextAlign::TOP_CENTER, "%s", weather_icon_map[id(today_weather).state.c_str()].c_str());

          //today weather temperature  
          it.printf(780, 50, id(font_today_temp),id(color_black), TextAlign::TOP_RIGHT, "%s", id(today_temperature).state.c_str());
          it.filled_rectangle(540, 150, 235, 1,id(color_black));
          it.print(540, 185, id(font_jyuugothic_Light),id(color_black), TextAlign::BOTTOM_LEFT,"體感溫度");  
          it.printf(780, 220, id(font_feel_like),id(color_red), TextAlign::BOTTOM_RIGHT, "%s", id(today_feel_like).state.c_str());

          //************************ options_windows  ************************
          // Print sunrise and sun setting dates

          if (id(options_windows).state.c_str() == std::string("sun_and_moon"))  {
              it.printf(615, 235, id(sunset_down_up), id(color_black),TextAlign::CENTER_RIGHT, "\U000F059C");
              it.print(628, 235, id(font_rooms_name),id(color_black), TextAlign::CENTER_LEFT, id(next_sunset).state.c_str());
              it.printf(615, 270, id(sunset_down_up), id(color_black),TextAlign::CENTER_RIGHT, "\U000F059B");
              it.print(628, 270, id(font_rooms_name),id(color_black), TextAlign::CENTER_LEFT, id(next_sunrise).state.c_str()); 
              std::map<std::string, std::string> moon_icon_map
                {
                  {"new_moon", "\U000F0F64"},
                  {"full_moon", "\U000F0F62"},
                  {"waxing_crescent", "\U000F0F67"},
                  {"first_quarter", "\U000F0F61"},
                  {"waxing_gibbous", "\U000F0F68"},
                  {"waning_gibbous", "\U000F0F66"},
                  {"lightning-rainy", "\U000F067E"},
                  {"last_quarter", "\U000F0F63"},
                  {"waning_crescent", "\U000F0F65"},
                };   
              it.printf(780, 252, id(icon_sun_and_moon), id(color_black),TextAlign::CENTER_RIGHT,  moon_icon_map[id(today_moon).state.c_str()].c_str());
          } else if (id(options_windows).state.c_str() == std::string("time"))  {
              it.strftime(780, 250, id(font_month),id(color_black), TextAlign::CENTER_RIGHT, "%H:%M", id(ha_time).now());      
          } 

          //************************ FORECAST ************************
          int forecast_x=300;
          int forecast_y=310;
          int forecast_icon_gap=40;
          int forecast_data_gap=90;
          int forecast_x_gap=90;

          //temperature
          if (id(forcast_mode).state.c_str() == std::string("daily_high_low")){
              it.printf(forecast_x - 60, forecast_y+forecast_data_gap, id(icon_room),id(color_red), TextAlign::TOP_CENTER,"\U000F0E03"); //thermometer-chevron-up
              it.printf(forecast_x, forecast_y+forecast_data_gap, id(font_medium),id(color_black), TextAlign::TOP_CENTER, "%s", id(forecast_temperature_1).state.c_str()); 
              it.printf(forecast_x+forecast_x_gap, forecast_y+forecast_data_gap, id(font_medium),id(color_black), TextAlign::TOP_CENTER, "%s", id(forecast_temperature_3).state.c_str());  
              it.printf(forecast_x+forecast_x_gap*2, forecast_y+forecast_data_gap, id(font_medium),id(color_black), TextAlign::TOP_CENTER, "%s", id(forecast_temperature_5).state.c_str());      
              it.printf(forecast_x+forecast_x_gap*3, forecast_y+forecast_data_gap, id(font_medium),id(color_black), TextAlign::TOP_CENTER, "%s", id(forecast_temperature_7).state.c_str());       
              it.printf(forecast_x+forecast_x_gap*4, forecast_y+forecast_data_gap, id(font_medium),id(color_black), TextAlign::TOP_CENTER, "%s", id(forecast_temperature_9).state.c_str());       
              it.printf(forecast_x+forecast_x_gap*5, forecast_y+forecast_data_gap, id(font_medium),id(color_black), TextAlign::TOP_CENTER, "%s", id(forecast_temperature_11).state.c_str()); 
              it.printf(forecast_x, forecast_y+forecast_data_gap+forecast_icon_gap, id(font_medium),id(color_black), TextAlign::TOP_CENTER, "%s", id(forecast_templow_1).state.c_str());

              it.printf(forecast_x - 60, forecast_y+forecast_data_gap+forecast_icon_gap, id(icon_room),id(color_red), TextAlign::TOP_CENTER, "\U000F0E02"); //thermometer-chevron-down
              it.printf(forecast_x+forecast_x_gap, forecast_y+forecast_data_gap+forecast_icon_gap, id(font_medium),id(color_black), TextAlign::TOP_CENTER, "%s", id(forecast_templow_3).state.c_str());       
              it.printf(forecast_x+forecast_x_gap*2, forecast_y+forecast_data_gap+forecast_icon_gap, id(font_medium),id(color_black), TextAlign::TOP_CENTER, "%s", id(forecast_templow_5).state.c_str());          
              it.printf(forecast_x+forecast_x_gap*3, forecast_y+forecast_data_gap+forecast_icon_gap, id(font_medium),id(color_black), TextAlign::TOP_CENTER, "%s", id(forecast_templow_7).state.c_str());   
              it.printf(forecast_x+forecast_x_gap*4, forecast_y+forecast_data_gap+forecast_icon_gap, id(font_medium),id(color_black), TextAlign::TOP_CENTER, "%s", id(forecast_templow_9).state.c_str());      
              it.printf(forecast_x+forecast_x_gap*5, forecast_y+forecast_data_gap+forecast_icon_gap, id(font_medium),id(color_black), TextAlign::TOP_CENTER, "%s", id(forecast_templow_11).state.c_str());                       

          } else if (id(forcast_mode).state.c_str() == std::string("daily_high_rain")){
              it.printf(forecast_x - 60, forecast_y+forecast_data_gap, id(icon_room),id(color_red), TextAlign::TOP_CENTER,"\U000F0E03"); //thermometer-chevron-up
              it.printf(forecast_x, forecast_y+forecast_data_gap, id(font_medium),id(color_black), TextAlign::TOP_CENTER, "%s", id(forecast_temperature_1).state.c_str()); 
              it.printf(forecast_x+forecast_x_gap, forecast_y+forecast_data_gap, id(font_medium),id(color_black), TextAlign::TOP_CENTER, "%s", id(forecast_temperature_3).state.c_str());  
              it.printf(forecast_x+forecast_x_gap*2, forecast_y+forecast_data_gap, id(font_medium),id(color_black), TextAlign::TOP_CENTER, "%s", id(forecast_temperature_5).state.c_str());      
              it.printf(forecast_x+forecast_x_gap*3, forecast_y+forecast_data_gap, id(font_medium),id(color_black), TextAlign::TOP_CENTER, "%s", id(forecast_temperature_7).state.c_str());       
              it.printf(forecast_x+forecast_x_gap*4, forecast_y+forecast_data_gap, id(font_medium),id(color_black), TextAlign::TOP_CENTER, "%s", id(forecast_temperature_9).state.c_str());       
              it.printf(forecast_x+forecast_x_gap*5, forecast_y+forecast_data_gap, id(font_medium),id(color_black), TextAlign::TOP_CENTER, "%s", id(forecast_temperature_11).state.c_str());  
              
              it.printf(forecast_x - 60, forecast_y+forecast_data_gap+forecast_icon_gap, id(icon_room),id(color_red), TextAlign::TOP_CENTER, "\U000F0596"); //weather-pouring
              it.printf(forecast_x, forecast_y+forecast_data_gap+forecast_icon_gap, id(font_medium),id(color_black), TextAlign::TOP_CENTER, "%s", id(forecast_precipitation_probability_1).state.c_str()); 
              it.printf(forecast_x+forecast_x_gap, forecast_y+forecast_data_gap+forecast_icon_gap, id(font_medium),id(color_black), TextAlign::TOP_CENTER, "%s", id(forecast_precipitation_probability_3).state.c_str());       
              it.printf(forecast_x+forecast_x_gap*2, forecast_y+forecast_data_gap+forecast_icon_gap, id(font_medium),id(color_black), TextAlign::TOP_CENTER, "%s", id(forecast_precipitation_probability_5).state.c_str());          
              it.printf(forecast_x+forecast_x_gap*3, forecast_y+forecast_data_gap+forecast_icon_gap, id(font_medium),id(color_black), TextAlign::TOP_CENTER, "%s", id(forecast_precipitation_probability_7).state.c_str());   
              it.printf(forecast_x+forecast_x_gap*4, forecast_y+forecast_data_gap+forecast_icon_gap, id(font_medium),id(color_black), TextAlign::TOP_CENTER, "%s", id(forecast_precipitation_probability_9).state.c_str());      
              it.printf(forecast_x+forecast_x_gap*5, forecast_y+forecast_data_gap+forecast_icon_gap, id(font_medium),id(color_black), TextAlign::TOP_CENTER, "%s", id(forecast_precipitation_probability_11).state.c_str());      

          } else {
              it.printf(forecast_x - 60, forecast_y+forecast_data_gap, id(icon_room),id(color_red), TextAlign::TOP_CENTER,"\U000F0E03"); //thermometer-chevron-up
              it.printf(forecast_x, forecast_y+forecast_data_gap, id(font_medium),id(color_black), TextAlign::TOP_CENTER, "%s", id(forecast_temperature_1).state.c_str()); 
              it.printf(forecast_x+forecast_x_gap, forecast_y+forecast_data_gap, id(font_medium),id(color_black), TextAlign::TOP_CENTER, "%s", id(forecast_temperature_2).state.c_str());  
              it.printf(forecast_x+forecast_x_gap*2, forecast_y+forecast_data_gap, id(font_medium),id(color_black), TextAlign::TOP_CENTER, "%s", id(forecast_temperature_3).state.c_str());      
              it.printf(forecast_x+forecast_x_gap*3, forecast_y+forecast_data_gap, id(font_medium),id(color_black), TextAlign::TOP_CENTER, "%s", id(forecast_temperature_4).state.c_str());       
              it.printf(forecast_x+forecast_x_gap*4, forecast_y+forecast_data_gap, id(font_medium),id(color_black), TextAlign::TOP_CENTER, "%s", id(forecast_temperature_5).state.c_str());       
              it.printf(forecast_x+forecast_x_gap*5, forecast_y+forecast_data_gap, id(font_medium),id(color_black), TextAlign::TOP_CENTER, "%s", id(forecast_temperature_6).state.c_str());  

              it.printf(forecast_x - 60, forecast_y+forecast_data_gap+forecast_icon_gap, id(icon_room),id(color_red), TextAlign::TOP_CENTER, "\U000F0596"); //weather-pouring
              it.printf(forecast_x, forecast_y+forecast_data_gap+forecast_icon_gap, id(font_medium),id(color_black), TextAlign::TOP_CENTER, "%s", id(forecast_precipitation_probability_1).state.c_str()); 
              it.printf(forecast_x+forecast_x_gap, forecast_y+forecast_data_gap+forecast_icon_gap, id(font_medium),id(color_black), TextAlign::TOP_CENTER, "%s", id(forecast_precipitation_probability_2).state.c_str());       
              it.printf(forecast_x+forecast_x_gap*2, forecast_y+forecast_data_gap+forecast_icon_gap, id(font_medium),id(color_black), TextAlign::TOP_CENTER, "%s", id(forecast_precipitation_probability_3).state.c_str());          
              it.printf(forecast_x+forecast_x_gap*3, forecast_y+forecast_data_gap+forecast_icon_gap, id(font_medium),id(color_black), TextAlign::TOP_CENTER, "%s", id(forecast_precipitation_probability_4).state.c_str());   
              it.printf(forecast_x+forecast_x_gap*4, forecast_y+forecast_data_gap+forecast_icon_gap, id(font_medium),id(color_black), TextAlign::TOP_CENTER, "%s", id(forecast_precipitation_probability_5).state.c_str());      
              it.printf(forecast_x+forecast_x_gap*5, forecast_y+forecast_data_gap+forecast_icon_gap, id(font_medium),id(color_black), TextAlign::TOP_CENTER, "%s", id(forecast_precipitation_probability_6).state.c_str());      

          } 

          it.line(forecast_x+45, 345, forecast_x+45, 465);

           if (id(forcast_mode).state.c_str() == std::string("hourly")){         
              //DAY1
              //weekday
              it.printf(forecast_x, forecast_y, id(font_medium_bold),id(color_black), TextAlign::TOP_CENTER, "%s", id(forecast_time_1).state.c_str()); 
              //icon
              it.printf(forecast_x, forecast_y+forecast_icon_gap, id(icon_forecast),id(color_red), TextAlign::TOP_CENTER, "%s", weather_icon_map[id(forecast_weather_1).state.c_str()].c_str()); 

              //DAY2
              //weekday
                it.printf(forecast_x+forecast_x_gap, forecast_y, id(font_medium_bold),id(color_black), TextAlign::TOP_CENTER, "%s", id(forecast_time_2).state.c_str());  
              //icon
                it.printf(forecast_x+forecast_x_gap, forecast_y+forecast_icon_gap, id(icon_forecast),id(color_red), TextAlign::TOP_CENTER, "%s", weather_icon_map[id(forecast_weather_2).state.c_str()].c_str()); 
                it.line(forecast_x+forecast_x_gap+45, 345, forecast_x+forecast_x_gap+45, 465);
              
              //DAY3
              //weekday
                it.printf(forecast_x+forecast_x_gap*2, forecast_y, id(font_medium_bold),id(color_black), TextAlign::TOP_CENTER, "%s", id(forecast_time_3).state.c_str());  
              //icon
                it.printf(forecast_x+forecast_x_gap*2, forecast_y+forecast_icon_gap, id(icon_forecast),id(color_red), TextAlign::TOP_CENTER, "%s", weather_icon_map[id(forecast_weather_3).state.c_str()].c_str()); 
                it.line(forecast_x+forecast_x_gap*2+45, 345, forecast_x+forecast_x_gap*2+45, 465);
              
              //DAY4
              //weekday
                it.printf(forecast_x+forecast_x_gap*3, forecast_y, id(font_medium_bold),id(color_black), TextAlign::TOP_CENTER, "%s", id(forecast_time_4).state.c_str());
              //icon
                it.printf(forecast_x+forecast_x_gap*3, forecast_y+forecast_icon_gap, id(icon_forecast),id(color_red), TextAlign::TOP_CENTER, "%s", weather_icon_map[id(forecast_weather_4).state.c_str()].c_str());
                it.line(forecast_x+forecast_x_gap*3+45, 345, forecast_x+forecast_x_gap*3+45, 465);

              //DAY5
              //weekday
                it.printf(forecast_x+forecast_x_gap*4, forecast_y, id(font_medium_bold),id(color_black), TextAlign::TOP_CENTER, "%s", id(forecast_time_5).state.c_str());
              //icon
                it.printf(forecast_x+forecast_x_gap*4, forecast_y+forecast_icon_gap, id(icon_forecast),id(color_red), TextAlign::TOP_CENTER, "%s", weather_icon_map[id(forecast_weather_5).state.c_str()].c_str());
                it.line(forecast_x+forecast_x_gap*4+45, 345, forecast_x+forecast_x_gap*4+45, 465);

              //DAY6
              //weekday
                it.printf(forecast_x+forecast_x_gap*5, forecast_y, id(font_medium_bold),id(color_black), TextAlign::TOP_CENTER, "%s", id(forecast_time_6).state.c_str());
              //icon
                it.printf(forecast_x+forecast_x_gap*5, forecast_y+forecast_icon_gap, id(icon_forecast),id(color_red), TextAlign::TOP_CENTER, "%s", weather_icon_map[id(forecast_weather_6).state.c_str()].c_str());


          } else {
              //DAY1
              //weekday

              // 英文星期名稱與中文對應表
              std::map<std::string, std::string> weekday_map = {
                  {"Mon", "週一"},
                  {"Tue", "週二"},
                  {"Wed", "週三"},
                  {"Thu", "週四"},
                  {"Fri", "週五"},
                  {"Sat", "週六"},
                  {"Sun", "週日"}
              };
              // 取得英文星期名稱
              std::string english_weekday = id(forecast_weekday_1).state;
              // 將英文星期轉換為中文星期，若找不到對應，預設顯示 "未知星期"
              std::string chinese_weekday = weekday_map.count(english_weekday) > 0 ? weekday_map[english_weekday] : "未知星期";
              // 顯示中文星期名稱
              it.printf(forecast_x, forecast_y, id(font_jyuugothic_Light), id(color_black), TextAlign::TOP_CENTER, "%s", chinese_weekday.c_str());
              //icon
              it.printf(forecast_x, forecast_y+forecast_icon_gap, id(icon_forecast),id(color_red), TextAlign::TOP_CENTER, "%s", weather_icon_map[id(forecast_weather_1).state.c_str()].c_str()); 

              //DAY2
              //weekday
              std::string english_weekday3 = id(forecast_weekday_3).state;
              std::string chinese_weekday3 = weekday_map.count(english_weekday3) > 0 ? weekday_map[english_weekday3] : "未知星期";
                it.printf(forecast_x+forecast_x_gap, forecast_y, id(font_jyuugothic_Light),id(color_black), TextAlign::TOP_CENTER, "%s", chinese_weekday3.c_str());
              //icon
                it.printf(forecast_x+forecast_x_gap, forecast_y+forecast_icon_gap, id(icon_forecast),id(color_red), TextAlign::TOP_CENTER, "%s", weather_icon_map[id(forecast_weather_3).state.c_str()].c_str()); 
                it.line(forecast_x+forecast_x_gap+45, 345, forecast_x+forecast_x_gap+45, 465);
              
              //DAY3
              //weekday
              std::string english_weekday5 = id(forecast_weekday_5).state;
              std::string chinese_weekday5 = weekday_map.count(english_weekday5) > 0 ? weekday_map[english_weekday5] : "未知星期";
                it.printf(forecast_x+forecast_x_gap*2, forecast_y, id(font_jyuugothic_Light),id(color_black), TextAlign::TOP_CENTER, "%s",  chinese_weekday5.c_str());
              //icon
                it.printf(forecast_x+forecast_x_gap*2, forecast_y+forecast_icon_gap, id(icon_forecast),id(color_red), TextAlign::TOP_CENTER, "%s", weather_icon_map[id(forecast_weather_5).state.c_str()].c_str()); 
                it.line(forecast_x+forecast_x_gap*2+45, 345, forecast_x+forecast_x_gap*2+45, 465);
              
              //DAY4
              //weekday
              std::string english_weekday7 = id(forecast_weekday_7).state;
              std::string chinese_weekday7 = weekday_map.count(english_weekday7) > 0 ? weekday_map[english_weekday7] : "未知星期";              
                it.printf(forecast_x+forecast_x_gap*3, forecast_y, id(font_jyuugothic_Light),id(color_black), TextAlign::TOP_CENTER, "%s", chinese_weekday7.c_str());
              //icon
                it.printf(forecast_x+forecast_x_gap*3, forecast_y+forecast_icon_gap, id(icon_forecast),id(color_red), TextAlign::TOP_CENTER, "%s", weather_icon_map[id(forecast_weather_7).state.c_str()].c_str());
                it.line(forecast_x+forecast_x_gap*3+45, 345, forecast_x+forecast_x_gap*3+45, 465);

              //DAY5
              //weekday
              std::string english_weekday9 = id(forecast_weekday_9).state;
              std::string chinese_weekday9 = weekday_map.count(english_weekday9) > 0 ? weekday_map[english_weekday9] : "未知星期";                  
                it.printf(forecast_x+forecast_x_gap*4, forecast_y, id(font_jyuugothic_Light),id(color_black), TextAlign::TOP_CENTER, "%s", chinese_weekday9.c_str());
              //icon
                it.printf(forecast_x+forecast_x_gap*4, forecast_y+forecast_icon_gap, id(icon_forecast),id(color_red), TextAlign::TOP_CENTER, "%s", weather_icon_map[id(forecast_weather_9).state.c_str()].c_str());
                it.line(forecast_x+forecast_x_gap*4+45, 345, forecast_x+forecast_x_gap*4+45, 465);

              //DAY6
              //weekday
              std::string english_weekday11 = id(forecast_weekday_11).state;
              std::string chinese_weekday11 = weekday_map.count(english_weekday11) > 0 ? weekday_map[english_weekday11] : "未知星期";                     
                it.printf(forecast_x+forecast_x_gap*5, forecast_y, id(font_jyuugothic_Light),id(color_black), TextAlign::TOP_CENTER, "%s", chinese_weekday11.c_str());
              //icon
                it.printf(forecast_x+forecast_x_gap*5, forecast_y+forecast_icon_gap, id(icon_forecast),id(color_red), TextAlign::TOP_CENTER, "%s", weather_icon_map[id(forecast_weather_11).state.c_str()].c_str());

          }

          //last update time
          if (id(show_last_updated).state) {
            it.strftime(762, 3, id(font_smallest), id(color_black), TextAlign::TOP_LEFT, "%H:%M", id(ha_time).now());
            it.print(760, 3, id(font_smallest), id(color_black), TextAlign::TOP_RIGHT, "Last updated:");
            }
